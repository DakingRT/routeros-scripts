#!rsc by RouterOS
# RouterOS script: update-tunnelbroker
# Copyright (c) 2013-2022 Christian Hesse <mail@eworm.de>
#                         Michael Gisbers <michael@gisbers.de>
# https://git.eworm.de/cgit/routeros-scripts/about/COPYING.md
#
# provides: ppp-on-up
#
# update local address of tunnelbroker interface
# https://git.eworm.de/cgit/routeros-scripts/about/doc/update-tunnelbroker.md

:local 0 "update-tunnelbroker";
:global GlobalFunctionsReady;
:while ($GlobalFunctionsReady != true) do={ :delay 500ms; }

:global CertificateAvailable;
:global LogPrintExit2;
:global ParseKeyValueStore;

:if ([ $CertificateAvailable "Starfield Secure Certificate Authority - G2" ] = false || \
     [ $CertificateAvailable "R3" ] = false) do={
  $LogPrintExit2 error $0 ("Downloading required certificate failed.") true;
}

:local PublicAddress;
:do {
  :set PublicAddress ([ /tool/fetch check-certificate=yes-without-crl \
    "https://ipv4.showipv6.de/short" output=user as-value ]->"data");
} on-error={
  $LogPrintExit2 error $0 ("Failed getting public address.") true;
}

:if ([ :len [ /ip/address find where address~("^" . $PublicAddress . "/") ] ] < 1) do={
  $LogPrintExit2 warning $0 ("The address " . $PublicAddress . " is not configured on your device. NAT by ISP?") false;
}

:foreach Interface in=[ /interface/6to4/find where comment~"^tunnelbroker" !disabled ] do={
  :local InterfaceVal [ /interface/6to4/get $Interface ];

  :if ($PublicAddress != $InterfaceVal->"local-address") do={
    :local I 0;
    :local Success false;
    :local Comment [ $ParseKeyValueStore ($InterfaceVal->"comment") ];

    $LogPrintExit2 info $0 ("Local address changed, sending UPDATE to tunnelbroker! New address: " . $PublicAddress) false;
    :while ($I < 3 && $Success = false) do={
      :do {
        /tool/fetch check-certificate=yes-without-crl \
            ("https://ipv4.tunnelbroker.net/nic/update\?hostname=" . $Comment->"id") \
            user=($Comment->"user") password=($Comment->"pass") output=none as-value;
        :set Success true;
      } on-error={
        :delay 10s;
        :set I ($I + 1);
      }
    }
    :if ($Success = false) do={
      $LogPrintExit2 error $0 ("Failed sending the local address to tunnelbroker! Wrong credentials?") true;
    }
    /interface/6to4/set $Interface local-address=$PublicAddress;
  } else={
    $LogPrintExit2 debug $0 ("All tunnelbroker configuration is up to date for interface " . $InterfaceVal->"name" . ".") false;
  }
}
